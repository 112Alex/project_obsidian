package usecase

import (
	"context"
	"fmt"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/112Alex/project_obsidian/internal/domain/entity"
	"github.com/112Alex/project_obsidian/internal/domain/repository"
	"github.com/112Alex/project_obsidian/pkg/logger"
)

// TelegramHandlersUseCase –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
type TelegramHandlersUseCase struct {
	userRepo                repository.UserRepository
	jobRepo                 repository.JobRepository
	audioProcessingUseCase  *AudioProcessingUseCase
	notionProcessingUseCase *NotionProcessingUseCase
	logger                  *logger.Logger
}

// NewTelegramHandlersUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
func NewTelegramHandlersUseCase(
	userRepo repository.UserRepository,
	jobRepo repository.JobRepository,
	audioProcessingUseCase *AudioProcessingUseCase,
	notionProcessingUseCase *NotionProcessingUseCase,
	logger *logger.Logger,
) *TelegramHandlersUseCase {
	return &TelegramHandlersUseCase{
		userRepo:                userRepo,
		jobRepo:                 jobRepo,
		audioProcessingUseCase:  audioProcessingUseCase,
		notionProcessingUseCase: notionProcessingUseCase,
		logger:                  logger,
	}
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (uc *TelegramHandlersUseCase) HandleStart(ctx context.Context, telegramID int64, username string) (string, error) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
	uc.logger.Info("Handling /start command",
		"telegram_id", telegramID,
		"username", username,
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userRepo.GetByTelegramID(ctx, telegramID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		user = &entity.User{
			TelegramID:       telegramID,
			Username:         username,
			CreatedAt:        time.Now(),
			UpdatedAt:        time.Now(),
			NotionToken:      "",
			NotionDatabaseID: "",
		}

		err = uc.userRepo.Create(ctx, user)
		if err != nil {
			uc.logger.Error("Failed to create user",
				"error", err,
			)
			return "", fmt.Errorf("failed to create user: %w", err)
		}
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	welcomeMessage := fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n"+
			"–Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ Notion. üéôÔ∏èüìù\n\n"+
			"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ —è:\n"+
			"1Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç\n"+
			"2Ô∏è‚É£ –°–æ–∑–¥–∞–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"+
			"3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—é –≤ —Ç–≤–æ—é –±–∞–∑—É Notion (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)\n\n"+
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"+
			"/notion - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Notion\n"+
			"/jobs - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
		username,
	)

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
	uc.logger.Info("Successfully handled /start command",
		"telegram_id", telegramID,
		"user_id", user.ID,
	)

	return welcomeMessage, nil
}

// HandleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (uc *TelegramHandlersUseCase) HandleHelp(ctx context.Context, telegramID int64) (string, error) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
	uc.logger.Info("Handling /help command",
		"telegram_id", telegramID,
	)

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
	helpMessage := "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* ü§ñ\n\n" +
		"*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n" +
		"‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç\n" +
		"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏\n" +
		"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Notion\n\n" +
		"*–ö–æ–º–∞–Ω–¥—ã:*\n" +
		"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
		"/notion - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Notion\n" +
		"/jobs - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á\n\n" +
		"*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n" +
		"1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª\n" +
		"2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)\n" +
		"3. –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n" +
		"4. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n" +
		"*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ:*\n" +
		"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram\n" +
		"‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã (.mp3, .wav, .ogg, .m4a)\n\n" +
		"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Notion:*\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /notion –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion. –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Notion."

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
	uc.logger.Info("Successfully handled /help command",
		"telegram_id", telegramID,
	)

	return helpMessage, nil
}

// HandleNotion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /notion
func (uc *TelegramHandlersUseCase) HandleNotion(ctx context.Context, telegramID int64, args string) (string, error) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /notion
	uc.logger.Info("Handling /notion command",
		"telegram_id", telegramID,
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userRepo.GetByTelegramID(ctx, telegramID)
	if err != nil {
		uc.logger.Error("Failed to get user",
			"error", err,
		)
		return "", fmt.Errorf("failed to get user: %w", err)
	}

	// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
	if args == "" {
		notionInstructions := "üîó *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion* üîó\n\n" +
			"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n" +
			"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É [notion.so/my-integrations](https://www.notion.so/my-integrations)\n" +
			"2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é\n" +
			"3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n" +
			"4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/notion –≤–∞—à_—Ç–æ–∫–µ–Ω`\n\n" +
			"–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∞—à–µ–º Notion –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Notion
		uc.logger.Info("Sent Notion setup instructions",
			"telegram_id", telegramID,
		)

		return notionInstructions, nil
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion
	notionToken := strings.TrimSpace(args)
	err = uc.notionProcessingUseCase.SetupNotionIntegration(ctx, user.ID, notionToken)
	if err != nil {
		uc.logger.Error("Failed to setup Notion integration",
			"error", err,
		)
		return "", fmt.Errorf("failed to setup Notion integration: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
	successMessage := "‚úÖ *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!* ‚úÖ\n\n" +
		"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Notion.\n\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion
	uc.logger.Info("Successfully set up Notion integration",
		"telegram_id", telegramID,
		"user_id", user.ID,
	)

	return successMessage, nil
}

// HandleJobs –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /jobs
func (uc *TelegramHandlersUseCase) HandleJobs(ctx context.Context, telegramID int64) (string, error) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /jobs
	uc.logger.Info("Handling /jobs command",
		"telegram_id", telegramID,
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userRepo.GetByTelegramID(ctx, telegramID)
	if err != nil {
		uc.logger.Error("Failed to get user",
			"error", err,
		)
		return "", fmt.Errorf("failed to get user: %w", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	jobs, err := uc.audioProcessingUseCase.GetUserJobs(ctx, user.ID)
	if err != nil {
		uc.logger.Error("Failed to get user jobs",
			"error", err,
		)
		return "", fmt.Errorf("failed to get user jobs: %w", err)
	}

	// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á
	if len(jobs) == 0 {
		return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", nil
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
	messageBuilder := strings.Builder{}
	messageBuilder.WriteString("üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:* üìã\n\n")

	for i, job := range jobs {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
		statusText := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		statusEmoji := "‚ùì"

		switch job.Status {
		case entity.JobStatusPending:
			statusText = "–í –æ—á–µ—Ä–µ–¥–∏"
			statusEmoji = "‚è≥"
		case entity.JobStatusProcessing:
			statusText = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
			statusEmoji = "‚öôÔ∏è"
		case entity.JobStatusTranscribed:
			statusText = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ"
			statusEmoji = "üìù"
		case entity.JobStatusSummarized:
			statusText = "–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
			statusEmoji = "üìä"
		case entity.JobStatusCompleted:
			statusText = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
			statusEmoji = "‚úÖ"
		case entity.JobStatusFailed:
			statusText = "–û—à–∏–±–∫–∞"
			statusEmoji = "‚ùå"
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
		fileName := filepath.Base(job.AudioFilePath)

		// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
		createdAt := job.CreatedAt.Format("02.01.2006 15:04")

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
		messageBuilder.WriteString(fmt.Sprintf(
			"%d. %s *%s* (%s)\n   –°–æ–∑–¥–∞–Ω–æ: %s\n",
			i+1,
			statusEmoji,
			fileName,
			statusText,
			createdAt,
		))

		// –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –µ—Å—Ç—å ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
		if job.Status == entity.JobStatusCompleted && job.NotionPageID != "" {
			messageBuilder.WriteString("   üìé –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Notion\n")
		}

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
		if i < len(jobs)-1 {
			messageBuilder.WriteString("\n")
		}
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /jobs
	uc.logger.Info("Successfully handled /jobs command",
		"telegram_id", telegramID,
		"user_id", user.ID,
		"jobs_count", len(jobs),
	)

	return messageBuilder.String(), nil
}

// HandleVoiceMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (uc *TelegramHandlersUseCase) HandleVoiceMessage(ctx context.Context, telegramID int64, username string, fileID string, filePath string) (string, error) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	uc.logger.Info("Handling voice message",
		"telegram_id", telegramID,
		"file_id", fileID,
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userRepo.GetByTelegramID(ctx, telegramID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		user = &entity.User{
			TelegramID:       telegramID,
			Username:         username,
			CreatedAt:        time.Now(),
			UpdatedAt:        time.Now(),
			NotionToken:      "",
			NotionDatabaseID: "",
		}

		err = uc.userRepo.Create(ctx, user)
		if err != nil {
			uc.logger.Error("Failed to create user",
				"error", err,
			)
			return "", fmt.Errorf("failed to create user: %w", err)
		}

		// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –º–µ—Ç–æ–¥–µ Create
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
	fileName := filepath.Base(filePath)
	jobID, err := uc.audioProcessingUseCase.ProcessAudio(ctx, telegramID, filePath, fileName)
	if err != nil {
		uc.logger.Error("Failed to process audio file",
			"error", err,
		)
		return "", fmt.Errorf("failed to process audio file: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	responseMessage := "üéôÔ∏è *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!* üéôÔ∏è\n\n" +
		"–Ø –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n\n" +
		"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã.\n\n" +
		"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏: `" + fmt.Sprintf("%d", jobID) + "`\n\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /jobs"

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	uc.logger.Info("Successfully started processing voice message",
		"telegram_id", telegramID,
		"user_id", user.ID,
		"job_id", jobID,
	)

	return responseMessage, nil
}

// HandleAudioFile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª
func (uc *TelegramHandlersUseCase) HandleAudioFile(ctx context.Context, telegramID int64, username string, fileID string, filePath string) (string, error) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
	uc.logger.Info("Handling audio file",
		"telegram_id", telegramID,
		"file_id", fileID,
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := uc.userRepo.GetByTelegramID(ctx, telegramID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		user = &entity.User{
			TelegramID:       telegramID,
			Username:         username,
			CreatedAt:        time.Now(),
			UpdatedAt:        time.Now(),
			NotionToken:      "",
			NotionDatabaseID: "",
		}

		err = uc.userRepo.Create(ctx, user)
		if err != nil {
			uc.logger.Error("Failed to create user",
				"error", err,
			)
			return "", fmt.Errorf("failed to create user: %w", err)
		}

		// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ Create
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
	fileName := filepath.Base(filePath)
	jobID, err := uc.audioProcessingUseCase.ProcessAudio(ctx, telegramID, filePath, fileName)
	if err != nil {
		uc.logger.Error("Failed to process audio file",
			"error", err,
		)
		return "", fmt.Errorf("failed to process audio file: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	responseMessage := "üéµ *–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!* üéµ\n\n" +
		"–Ø –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n\n" +
		"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã.\n\n" +
		"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏: `" + fmt.Sprintf("%d", jobID) + "`\n\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /jobs"

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
	uc.logger.Info("Successfully started processing audio file",
		"telegram_id", telegramID,
		"user_id", user.ID,
		"job_id", jobID,
	)

	return responseMessage, nil
}

// SendJobCompletionNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
func (uc *TelegramHandlersUseCase) SendJobCompletionNotification(ctx context.Context, jobIDStr string) (int64, string, error) {
	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ jobID –≤ int64
	jobID, err := strconv.ParseInt(jobIDStr, 10, 64)
	if err != nil {
		uc.logger.Error("Failed to parse job ID",
			"error", err,
		)
		return 0, "", fmt.Errorf("failed to parse job ID: %w", err)
	}
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	uc.logger.Info("Sending job completion notification",
		"job_id", jobID,
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	job, err := uc.jobRepo.GetByID(ctx, jobID)
	if err != nil {
		uc.logger.Error("Failed to get job",
			"error", err,
		)
		return 0, "", fmt.Errorf("failed to get job: %w", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	user, err := uc.userRepo.GetByTelegramID(ctx, job.UserID)
	if err != nil {
		uc.logger.Error("Failed to get user",
			"error", err,
		)
		return 0, "", fmt.Errorf("failed to get user: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	messageBuilder := strings.Builder{}
	messageBuilder.WriteString("‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!* ‚úÖ\n\n")

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
	if job.Transcription != "" {
		// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		transcriptionPreview := job.Transcription
		if len(transcriptionPreview) > 500 {
			transcriptionPreview = transcriptionPreview[:500] + "..."
		}

		messageBuilder.WriteString("üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:*\n")
		messageBuilder.WriteString(transcriptionPreview)
		messageBuilder.WriteString("\n\n")
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
	if job.Summary != "" {
		messageBuilder.WriteString("üìä *–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n")
		messageBuilder.WriteString(job.Summary)
		messageBuilder.WriteString("\n\n")
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion
	if job.NotionPageID != "" {
		messageBuilder.WriteString("üìé *–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Notion*\n")
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	uc.logger.Info("Successfully prepared job completion notification",
		"job_id", jobID,
		"user_id", job.UserID,
		"telegram_id", user.TelegramID,
	)

	return user.TelegramID, messageBuilder.String(), nil
}
